@namespace AntDesign

@Render(Type, Attributes)

@using System.Reflection
@code {
    static Assembly _antAssembly;

    [Parameter]
    public Type Type { get; set; }

    [Parameter]
    public string TypeName
    {
        set
        {
            if (Type != null) return;
            _antAssembly ??= Assembly.GetExecutingAssembly();
            Type componentType = 
                _antAssembly.GetType($"AntDesign.{value}") ??
                _antAssembly.GetType(value) ??
                Type.GetType(value);
            if (componentType == null)
            {
                throw new ArgumentException($"Not found the component with the name \"{value}\"", nameof(TypeName));
            }
            Type = componentType;
        }
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; }

    RenderFragment Render(Type componentType, Dictionary<string, object> attributes)
    {
        return builder =>
        {
            builder.OpenComponent(0, componentType);
            if (attributes != null)
            {
                builder.AddMultipleAttributes(1, attributes);
            }
            builder.CloseComponent();
        };
    }
}
