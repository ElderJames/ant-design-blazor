@inject HttpClient HttpClient

<AntList Class="demo-loadmore-list" DataSource="@Data" ItemLayout="ListItemLayout.Horizontal" Loading="@InitLoading">
    <ChildContent Context="item">
        <ListItem Actions="_actions">
            <ListItemMeta Avatar="@_avatar" Description="Ant Design, a design language for background applications, is refined by Ant UED Team">
                <TitleTemplate>
                    <a href="https://ant.design">@item.Name.Last</a>
                </TitleTemplate>
            </ListItemMeta>
            <div>content</div>
        </ListItem>
    </ChildContent>
    <LoadMore>
        @if (!InitLoading && !Loading)
        {
            <div class="demo-loadmore-btn-content ">
                <Button OnClick="OnLoadMore">loading more</Button>
            </div>
        }
    </LoadMore>
</AntList>

<style>

    .demo-loadmore-list {
        min-height: 350px;
    }

    .demo-loadmore-btn-content {
        text-align: center;
        margin-top: 12px;
        height: 32px;
        line-height: 32px;
    }
</style>

@code {
    private static RenderFragment _avatar =@<Avatar Src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png"></Avatar>;

    private static readonly RenderFragment _edit = @<a key="list-loadmore-edit">edit</a>;

    private static readonly RenderFragment _add = @<a key="list-loadmore-more">more</a>;


    private readonly RenderFragment[] _actions =
    {
        _edit,
        _add
    };

    private int _count = 3;

    private string FakeDataUrl => $"https://randomuser.me/api/?results={_count}&inc=name,gender,email,nat&noinfo";

    private List<DataModel> Data { get; set; }

    private bool InitLoading { get; set; } = true;

    private bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Data = await GetData();
        InitLoading = false;
        await base.OnInitializedAsync();
    }

    private async Task OnLoadMore()
    {
        Loading = true;
        var res = await GetData();
        Data.AddRange(res);
        Loading = false;
    }

    private async Task<List<DataModel>> GetData()
    {
        try
        {
            var res = await HttpClient.GetFromJsonAsync<Response>(FakeDataUrl);
            return res.Results;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return new List<DataModel>();
        }
    }

    private class Response
    {
        public List<DataModel> Results { get; set; }
    }

    private class DataModel
    {
        public string Gender { get; set; }

        public Name Name { get; set; }

        public string Email { get; set; }

        public string Nat { get; set; }
    }

    private class Name
    {
        public string Title { get; set; }

        public string First { get; set; }

        public string Last { get; set; }
    }
}
