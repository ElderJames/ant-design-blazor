@using AntDesign.Internal
@namespace AntDesign
@inherits AntInputComponentBase<string>

<CascadingValue Value=@("ant-cascader-menus") Name="PrefixCls">
    <OverlayTrigger Visible="@_dropdownOpened"
                    OnMaskClick="CascaderOnBlur"
                    Trigger="new TriggerType[] { }"
                    PopupContainerSelector="@PopupContainerSelector"
                    OverlayEnterCls="ant-slide-up-enter ant-slide-up-enter-active ant-slide-up"
                    OverlayLeaveCls="ant-slide-up-leave ant-slide-up-leave-active ant-slide-up">
        <Unbound>
            <span @ref="context.Current" style="@Style" id="@Id" class="@ClassMapper.Class" tabindex="1"
                  @onmouseover="InputOnMouseOver"
                  @onmouseout="InputOnMouseOut"
                  @onclick="InputOnToggle">
                <span class="ant-cascader-picker-label">@_displayText</span>
                <input @ref="_inputRef"
                       autocomplete="off"
                       tabindex="-1"
                       placeholder="@(string.IsNullOrWhiteSpace(_displayText)?_placeHolder:"")"
                       class="@_inputClassMapper.Class"
                       readonly="@(!ShowSearch)"
                       type="text"
                       value="@_searchValue"
                       @oninput="OnSearchInput"
                       @onkeyup="OnSearchKeyUp">
                @if (string.IsNullOrWhiteSpace(Value) || !_showClearIcon)
                {
                    <Icon Type="down" Class="@($"ant-cascader-picker-arrow {(_dropdownOpened ? "ant-cascader-picker-arrow-expand" : string.Empty)}")" StopPropagation />
                }
                else
                {
                    <Icon Type="close-circle" Theme="fill" Class="ant-cascader-picker-clear" OnClick="ClearSelected" StopPropagation />
                }
            </span>
        </Unbound>
        <Overlay>
            <div class="ant-cascader-menus ant-cascader-menus-placement-bottomLeft" tabindex="-1">
                <div @onmouseover="NodesOnMouseOver" @onmouseout="NodesOnMouseOut">
                    @if (!ShowSearch || string.IsNullOrWhiteSpace(_searchValue))
                    {
                        <ul class="@_menuClassMapper.Class">
                            @menuList((_nodelist, this))
                        </ul>
                        @foreach (CascaderNode node in _renderNodes)
                        {
                            if (node.HasChildren)
                            {
                                <ul class="ant-cascader-menu">
                                    @menuList((node.Children, this))
                                </ul>
                            }
                        }
                    }
                    else
                    {
                        <ul class="@_menuClassMapper.Class" style="@_menuStyle">
                            @searchList(this)
                        </ul>
                    }
                </div>
            </div>
        </Overlay>
    </OverlayTrigger>
</CascadingValue>

@code{
    RenderFragment<(IEnumerable<CascaderNode> nodes, Cascader cascader)> menuList = context =>@<Template>
        @foreach (CascaderNode node in context.nodes)
        {
            var cascader = context.cascader;
            bool isActive = cascader._renderNodes.Where(n => n == node).Any();
            string activeClass = isActive ? "ant-cascader-menu-item-active" : string.Empty;
            string disabledClass = node.Disabled ? "ant-cascader-menu-item-disabled" : string.Empty;
            var events = new Dictionary<string, object>
            {
                ["onclick"] = cascader._callbackFactory.Create(cascader, e => cascader.NodeOnClick(node)),
                ["onmouseover"] = cascader._callbackFactory.Create(cascader, e => cascader.NodeOnMouseOver(node))
            };

            <li class="ant-cascader-menu-item ant-cascader-menu-item-expand @activeClass @disabledClass" title="@node.Label" role="menuitem" @attributes="events">
                @node.Label
                @if (node.HasChildren)
                {
                    <span class="ant-cascader-menu-item-expand-icon">
                        <Icon Type="right" />
                    </span>
                }
            </li>
        }
    </Template>;

    RenderFragment<Cascader> searchList = cascader =>@<Template>
        @{
            var matchingNodes = cascader._searchList.Where(x => x.Label.Contains(cascader._searchValue, StringComparison.OrdinalIgnoreCase));
        }
        @foreach (var node in matchingNodes)
        {
            bool isActive = cascader._renderNodes.Where(n => n == node).Any();
            string activeClass = isActive ? "ant-cascader-menu-item-active" : string.Empty;
            string disabledClass = node.Disabled ? "ant-cascader-menu-item-disabled" : string.Empty;
            var events = new Dictionary<string, object>
            {
                ["onclick"] = cascader._callbackFactory.Create(cascader, e => cascader.NodeOnClick(node)),
            };
            var label = node.Label.Replace(cascader._searchValue, $"<span class=\"ant-cascader-menu-item-keyword\">{cascader._searchValue}</span>");
            <li class="ant-cascader-menu-item @activeClass @disabledClass" title="@node.Label" role="menuitem" @attributes="events">@((MarkupString)label)</li>
        }
    </Template>;
}