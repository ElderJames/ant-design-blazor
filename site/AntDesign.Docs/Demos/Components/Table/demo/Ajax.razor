@using AntDesign.TableModels
@using System.ComponentModel
@using System.Net.Http.Headers
@inject HttpClient Http

<Table TItem="Data" DataSource="_data" @bind-PageIndex="_pageIndex" @bind-PageSize="_pageSize" Total="_total"
       Loading="_loading" OnChange="HandleTableChange" RemoteDataSource>
    <Column Style="width:20%;" @bind-Field="@context.Name" Sortable>@context.Name.First @context.Name.Last</Column>
    <Column Style="width:20%;" @bind-Field="@context.Gender" Filters="_genderFilters" />
    <Column @bind-Field="@context.Email" />
</Table>

@code{
    bool _loading = false;
    int _pageIndex = 1;
    int _pageSize = 10;
    int _total;
    Data[] _data = Array.Empty<Data>();
    TableFilter<string>[] _genderFilters = new TableFilter<string>[]
    {
        new TableFilter<string> { Text = "Male", Value = "male" },
        new TableFilter<string> { Text = "Female", Value = "female" },
    };

    public class Data
    {
        [DisplayName("Name")]
        public Name Name { get; set; }

        [DisplayName("Gender")]
        public string Gender { get; set; }

        [DisplayName("Email")]
        public string Email { get; set; }
    }

    public struct Name
    {
        public string First { get; set; }

        public string Last { get; set; }
    }

    public class ApiResponse
    {
        public Data[] Results { get; set; }

        //public int TotalCount { get; set; }
    }

    async Task HandleTableChange(QueryModel<Data> queryModel)
    {
        _loading = true;
        StateHasChanged();
        if (Http.DefaultRequestHeaders.Accept.Any() == false)
        {
            Http.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        }
        var response = await Http.GetAsync("https://randomuser.me/api?" + GetRandomuserParams(queryModel));
        ApiResponse data = await response.Content.ReadFromJsonAsync<ApiResponse>();
        _loading = false;
        _data = data.Results;
        _total = 200;
        // 200 is mock data, you should read it from server
        //_total = data.TotalCount;
    }

    string GetRandomuserParams(QueryModel<Data> queryModel)
    {
        Dictionary<string, object> queryStringParams = new Dictionary<string, object>
        {
            ["results"] = queryModel.PageSize,
            ["page"] = queryModel.PageIndex,
            ["sortField"] = queryModel.SortModel.FirstOrDefault()?.FieldName,
            ["sortOrder"] = queryModel.SortModel.FirstOrDefault()?.Sort,
        };

        if (queryModel.FilterModel?.Any() == true)
        {
            foreach (var filter in queryModel.FilterModel.FirstOrDefault().SelectedValues)
            {
                queryStringParams.Add("gender[]", filter);
            }
        }

        return string.Join(
            '&',
            queryStringParams.Select(param => $"{Uri.EscapeDataString(param.Key)}={Uri.EscapeDataString(param.Value?.ToString() ?? "")}"));
    }
}
