@using System.Globalization
<div class="sidebar-logo">
    <a href="https://github.com/ElderJames/ant-design-blazor" target="_blank">
        <img src="https://raw.githubusercontent.com/ElderJames/ant-design-blazor/master/logo.svg?sanitize=true" alt="logo">
        <h1>Ant Design Blazor</h1>
    </a>
</div>
<AntMenu theme="dark" mode="AntDirectionVHIType.inline" inlineCollapsed="isCollapsed">
    @menuItemTemplate(MenuItems)
</AntMenu>


@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@code {
    [Parameter] public bool isCollapsed { get; set; }

    MenuItem[] MenuItems = { };

    static readonly RenderFragment<MenuItem[]> menuItemTemplate = (items) =>@<Template>
        @foreach (var menu in items)
        {
            if (menu.Type == "menuItem")
            {
                <AntMenuItem matchRouter>
                    <AntNavLink href="@($"{CultureInfo.CurrentCulture.Name}/{menu.Url}")" Match="@NavLinkMatch.All" Default="@menu.Default">
                        @menu.Title
                    </AntNavLink>
                </AntMenuItem> 
            } 
            else if (menu.Type == "subMenu")
            {
                <AntSubMenu open="@menu.Open" title="@menu.Title" icon="@menu.Icon">
                    @if (menu.Children.Any())
                    {
                        @menuItemTemplate(menu.Children)
                    }
                </AntSubMenu> 
            }
            else if (menu.Type == "itemGroup")
            {
                <AntMenuItemGroup title="@menu.Title">
                    @if (menu.Children.Any())
                    {
                        @menuItemTemplate(menu.Children)
                    }
                </AntMenuItemGroup>
            }
        }
    </Template>;


    protected override async Task OnInitializedAsync()
    {
        var baseUrl = NavigationManager.ToAbsoluteUri(NavigationManager.BaseUri);
        MenuItems = await HttpClient.GetFromJsonAsync<MenuItem[]>(new Uri(baseUrl, "_content/AntBlazor.Docs/menu.json").ToString());

        NavigationManager.LocationChanged += (_, args) =>
        {
            StateHasChanged();
        };
        await base.OnInitializedAsync();
    }

    public class MenuItem
    {
        public string Title { get; set; }

        public string Type { get; set; }

        public string Url { get; set; }

        public string Prefix { get; set; }

        public bool Open { get; set; }

        public string Icon { get; set; }

        public bool Default { get; set; }

        public MenuItem[] Children { get; set; }
    }
    }
