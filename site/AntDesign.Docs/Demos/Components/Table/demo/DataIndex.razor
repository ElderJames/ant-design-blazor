<Table @ref="_table" TItem="TestData" DataSource="@_testData">
    <Column @bind-Field="@context.Id" Sortable/>
    <Column Title="DayOfWeek" @bind-Field="@context.DayOfWeek" Sortable/>
    <Column Title="DayOfWeek DataIndex" TData="int" DataIndex="DayOfWeek" Sortable SorterCompare="@((v1, v2) => v1 - v2)"/>
    <Column Title="N1.N12.N2A DataIndex" TData="string" DataIndex=@("N1.N12[\"test\"].N2A") Sortable SorterCompare="@((v1, v2) => string.CompareOrdinal(v1, v2))"/>
    <Column Title="N1.N1A DataIndex Nullable" TData="int?" DataIndex="N1.N1A" Sortable SorterCompare="CompareNullableInt"/>
    <Column Title="Time" TData="DateTime?" DataIndex=@(@"N1.N12[""test""].Time") Format="yyyy-MM-dd hh:mm:ss" Sortable SorterCompare="_dateTimeCompare"></Column>
</Table>

@code {
    private ITable _table;

    private TestData[] _testData;

    private class TestData
    {
        public int Id { get; set; }

        public int DayOfWeek { get; set; }

        public int Jobs { get; set; }

        public int Popularity { get; set; }

        public Nested1 N1 { get; set; }
    }

    private class Nested1
    {
        public int? N1A { get; set; }

        public Dictionary<string, Nested2> N12 { get; set; }
    }

    private class Nested2
    {
        public string N2A { get; set; }

        public DateTime? Time { get; set; }
    }

    private readonly string[] _dayName =
    {
        "None",
        "Monday",
        "Tuesday",
        "Wednesdays",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday"
    };

    private readonly Func<DateTime?, DateTime?, int> _dateTimeCompare = (t1, t2) =>
    {
        if (t1.HasValue &&
            t2.HasValue) return DateTime.Compare(t1.Value, t2.Value);
        if (t1.HasValue)
            return 1;
        if (t2.HasValue)
            return -1;

        return 0;
    };

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        _testData = GetForecastAsync();
        base.OnInitialized();
    }

    private TestData[] GetForecastAsync()
    {
        var rng = new Random();
        var startDate = new DateTime(DateTime.Today.Year - 5, 1, 1);
        var range = (DateTime.Today - startDate).TotalSeconds;
        return Enumerable.Range(0, 5)
            .Select(index =>
            {
                var data = new TestData
                {
                    Id = index,
                    DayOfWeek = rng.Next(1, 8),
                    Jobs = rng.Next(0, 20),
                    Popularity = rng.Next(0, 30)
                };
                data.N1 = new Nested1()
                {
                    N1A = (index & 1) == 0 ? index : null,
                    N12 = new Dictionary<string, Nested2>
                    {
                        {
                            "no used", null
                        },
                        {
                            "test", new Nested2
                            {
                                N2A = _dayName[data.DayOfWeek] + " - DI",
                                Time = startDate.AddSeconds(rng.Next((int) range))
                            }
                        }
                    }
                };
                return data;
            })
            .ToArray();
    }

    private static int CompareNullableInt(int? a, int? b) => a switch
    {
        null when b is null => 0,
        null => -1,
        _ => a - b ?? 1
    };
}