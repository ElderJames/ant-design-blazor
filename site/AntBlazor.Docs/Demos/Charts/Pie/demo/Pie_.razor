@using AntDesign.Charts
@using Title = AntDesign.Charts.Title

    <Tabs>
        <TabPane Key="1">
            <Tab>Example 1</Tab>
            <ChildContent>
                <Pie Data="data1" Config="config1" />
            </ChildContent>
        </TabPane>

        <TabPane Key="2">
            <Tab>Example 2</Tab>
            <ChildContent>
                <Pie Data="data2" Config="config2" />
            </ChildContent>
        </TabPane>

        <TabPane Key="3">
            <Tab>Example 3</Tab>
            <ChildContent>
                <Pie Data="data3" Config="config3" />
            </ChildContent>
        </TabPane>

        <TabPane Key="4">
            <Tab>Example 4</Tab>
            <ChildContent>
                <Pie Data="data4" Config="config4" />
            </ChildContent>
        </TabPane>
    </Tabs>

@code{
    object[] data3 = new object[49];

    protected override async Task OnInitializedAsync()
    {
        for (int i = 1; i < 50; i++)
        {
            Random rd = new Random();
            data3[i - 1] = new { type = $"分类 {i}", value = rd.Next(0, 10) + 1 };
        }

        await base.OnInitializedAsync();

    }

    #region Example 1

    readonly object[] data1 =
{
        new
        {
            type = "Category One",
            value = 27
        },
        new
        {
            type = "Category Two",
            value = 25
        },
        new
        {
            type = "Category Three",
            value = 18
        },
        new
        {
            type = "Category Four",
            value = 15
        },
        new
        {
            type = "Category Five",
            value = 10
        },
        new
        {
            type = "Other",
            value = 5
        }
    };

    readonly PieConfig config1 = new PieConfig
    {
        ForceFit = true,
        Title = new Title
        {
            Visible = true,
            Text = "多色饼图"
        },
        Description = new Description
        {
            Visible = true,
            Text = "指定颜色映射字段(colorField)，饼图切片将根据该字段数据显示为不同的颜色。指定颜色需要将color配置为一个数组。\n当把饼图label的类型设置为inner时，标签会显示在切片内部。设置offset控制标签的偏移值。"
        },
        Radius = 0.8,
        AngleField = "value",
        ColorField = "type",
        Label = new PieLabelConfig
        {
            Visible = true,
            Type = "inner"
        }
    };

    #endregion Example 1

    #region Example 2

    readonly object[] data2 =
    {
        new
        {
            type = "Category One",
            value = 27
        },
        new
        {
            type = "Category Two",
            value = 25
        },
        new
        {
            type = "Category Three",
            value = 18
        },
        new
        {
            type = "Category Four",
            value = 15
        },
        new
        {
            type = "Category Five",
            value = 10
        },
        new
        {
            type = "Other",
            value = 5
        }
    };

    readonly PieConfig config2 = new PieConfig
    {
        ForceFit = true,
        Title = new Title
        {
            Visible = true,
            Text = "饼图-外部图形标签(outer label)"
        },
        Description = new Description
        {
            Visible = true,
            Text = "当把饼图label的类型设置为outer时，标签在切片外部拉线显示。设置offset控制标签的偏移值。"
        },
        Radius = 0.8,
        AngleField = "value",
        ColorField = "type",
        Label = new PieLabelConfig
        {
            Visible = true,
            Type = "outer",
            Offset = 20,
        }
    };

    #endregion Example 2

    #region Example 3


    readonly PieConfig config3 = new PieConfig
    {
        ForceFit = true,
        Title = new Title
        {
            Visible = true,
            Text = "饼图-外部圆形图形标签(outer-center label)"
        },
        Description = new Description
        {
            Visible = true,
            Text = "当把饼图label的类型设置为outer-center时，标签在切片外部拉线显示。outer-center布局的label发生遮挡会直接隐藏而不偏移躲避，相对于outer label布局来说，更美观"
        },
        Radius = 0.8,
        AngleField = "value",
        ColorField = "type",
        Label = new PieLabelConfig
        {
            Visible = true,
            Type = "outer-center",
        }
    };

    #endregion Example 3

    #region Example 4

    readonly object[] data4 =
    {
        new
        {
            type = "Category One",
            value = 27
        },
        new
        {
            type = "Category Two",
            value = 25
        },
        new
        {
            type = "Category Three",
            value = 18
        },
        new
        {
            type = "Category Four",
            value = 15
        },
        new
        {
            type = "Category Five",
            value = 10
        },
        new
        {
            type = "Other",
            value = 5
        }
    };

    readonly PieConfig config4 = new PieConfig
    {
        ForceFit = true,
        Title = new Title
        {
            Visible = true,
            Text = "Pie Chart-Graphic Tab Spider Layout"
        },
        Description = new Description
        {
            Visible = true,
            Text = "When the type of the pie chart label is set to spider, the labels are divided into two groups, and they are displayed in alignment by pulling lines on both sides of the chart. Generally speaking, the labels of the spider layout are less likely to block each other."
        },
        Radius = 0.8,
        AngleField = "value",
        ColorField = "type",
        Label = new PieLabelConfig
        {
            Visible = true,
            Type = "spider"
        }
    };

    #endregion Example 4

}