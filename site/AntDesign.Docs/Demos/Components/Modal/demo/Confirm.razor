@inject ModalService _modalService
@inject MessageService _message
<Space>
    <SpaceItem>
        <Button OnClick="@ShowConfirm">Confirm</Button>
    </SpaceItem>
    <SpaceItem>
        <Button OnClick="@ShowDeleteConfirm" Type="dashed">Delete</Button>
    </SpaceItem>

    <SpaceItem>
        <Button OnClick="@ShowPropsConfirm" Type="dashed"> With extra props</Button>
    </SpaceItem>
</Space>
<br />
<br />
<Space>
    <SpaceItem>
        <Button OnClick="@BlockingConfirm">Blocking Confirm</Button>
    </SpaceItem>
</Space>

@code {

    private readonly Func<ModalClosingEventArgs, Task> _onOk = e =>
    {
        Console.WriteLine("Ok");
        return Task.CompletedTask;
    };

    private readonly Func<ModalClosingEventArgs, Task> _onCancel = e =>
    {
        Console.WriteLine("Cancel");
        return Task.CompletedTask;
    };

    private readonly RenderFragment _icon = @<Icon Type="exclamation-circle" Theme="outline"></Icon>;

    private void ShowConfirm()
    {
        _modalService.Confirm(new ConfirmOptions
        {
            Title = "Do you Want to delete these items?",
            Icon = _icon,
            Content = "Some descriptions",
            OnOk = _onOk,
            OnCancel = _onCancel
        });
    }

    private void ShowDeleteConfirm()
    {
        _modalService.Confirm(new ConfirmOptions
        {
            Title = "Are you sure delete this task?",
            Icon = _icon,
            Content = "Some descriptions",
            OnOk = _onOk,
            OnCancel = _onCancel,
            OkType = "danger"
        });
    }

    private void ShowPropsConfirm()
    {
        _modalService.Confirm(new ConfirmOptions
        {
            Title = "Are you sure delete this task?",
            Icon = _icon,
            Content = "Some descriptions",
            OnOk = _onOk,
            OnCancel = _onCancel,
            OkType = "danger",
            OkButtonProps = new AntDesign.ButtonProps
            {
                Disabled = true
            }
        });
    }


    private async Task BlockingConfirm()
    {
        const string content = "Here is a blocking confirm, you can get OK or cancel button is click";
        const string title = "Info";

        var isTrue = await _modalService.ConfirmAsync(new ConfirmOptions
        {
            Content = content,
            Title = title
        });

        await _message.Info($"The confirm return {isTrue}");
    }
}
