@using System.ComponentModel.DataAnnotations
@using AntDesign.TableModels

<Space Style="margin-bottom:5px;">
    <SpaceItem>PaginationMode:</SpaceItem>
    <SpaceItem>
        <Select TItem="TablePaginationMode" TItemValue="TablePaginationMode" @bind-Value="_paginationMode">
            <SelectOptions>
                <SelectOption TItem="TablePaginationMode" TItemValue="TablePaginationMode" Value="TablePaginationMode.Auto" Label="Auto" />
                <SelectOption TItem="TablePaginationMode" TItemValue="TablePaginationMode" Value="TablePaginationMode.Server" Label="Server" />
                <SelectOption TItem="TablePaginationMode" TItemValue="TablePaginationMode" Value="TablePaginationMode.Client" Label="Client" />
            </SelectOptions>
        </Select>
    </SpaceItem>
    <SpaceItem>
        Total:
        <AntDesign.InputNumber @bind-Value="_total" />
    </SpaceItem>
    <SpaceItem>
        PageSize:
        <AntDesign.InputNumber @bind-Value="_pageSize" />
    </SpaceItem>
    <SpaceItem>
        DataSource Size:
        <AntDesign.InputNumber @bind-Value="_dataSourceSize" />
    </SpaceItem>
    <SpaceItem>
        <Button OnClick="async () => { forecasts = await GetForecastAsync(1, _dataSourceSize); }">New DataSource</Button>
    </SpaceItem>
</Space>

<Table @ref="table"
       TItem="WeatherForecast"
       DataSource="@forecasts"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       PaginationMode="_paginationMode"
       OnChange="OnChange"
>
    <Selection Key="@(context.Id.ToString())" />
    <Column @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.Date" Format="yyyy-MM-dd" Sortable />
    <Column @bind-Field="@context.TemperatureC" Sortable />
    <Column Title="Temp. (F)" Field="@context.TemperatureF" />
    <Column Title="Hot" Field="@context.Hot">
        <Switch @bind-Value="@context.Hot"></Switch>
    </Column>
    <Column @bind-Field="@context.Summary" Sortable />
    <ActionColumn>
        <Space>
            <SpaceItem><Button Danger OnClick="()=>Delete(context.Id)">Delete</Button></SpaceItem>
        </Space>
    </ActionColumn>
</Table>

@using System.Text.Json;
@code {

    WeatherForecast[] forecasts;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 50;
    TablePaginationMode _paginationMode;
    int _dataSourceSize = 50;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await GetForecastAsync(1, _total);
    }

    public class WeatherForecast
    {
        public int Id { get; set; }

        [Display(Name = "Date")]
        public DateTime? Date { get; set; }

        [Display(Name = "Temp. (C)")]
        public int TemperatureC { get; set; }

        [Display(Name = "Summary")]
        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public bool Hot { get; set; }
    }

    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    public async Task OnChange(QueryModel<WeatherForecast> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    public Task<WeatherForecast[]> GetForecastAsync(int pageIndex, int pageSize)
    {
        var rng = new Random();
        return Task.FromResult(Enumerable.Range((pageIndex - 1) * pageSize + 1, pageSize).Select(index =>
        {
            var temperatureC = rng.Next(-20, 55);
            return new WeatherForecast
            {
                Id = index,
                Date = DateTime.Now.AddDays(index),
                TemperatureC = temperatureC,
                Summary = Summaries[rng.Next(Summaries.Length)],
                Hot = temperatureC > 30,
            };
        }).ToArray());
    }

    private void Delete(int id)
    {
        forecasts = forecasts.Where(x => x.Id != id).ToArray();
        _total = forecasts.Length;
    }
}